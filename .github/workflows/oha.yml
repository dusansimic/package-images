name: oha

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches: [main]
    paths:
      - .github/workflows/oha.yml
      - images/oha/**

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: oha

jobs:
  get-version:
    name: Get next oha version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Get next version
        id: oha-version
        run: |
          current_version="$(grep -E "PACKAGE_VERSION=.+" images/${{ env.IMAGE_NAME }}/Containerfile | sed 's/.*=//')"
          echo $current_version
          latest_version="$(curl -sL https://api.github.com/repos/hatoo/oha/releases/latest | jq -r '.tag_name' | cut -c2-)"
          echo $latest_version
          if [ "$current_version" != "$latest_version" ]; then
            next_version="$latest_version"
          fi
          echo $next_version
          echo "gh_version=${next_version}" >> $GITHUB_OUTPUT

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: get-version
    if: ${{ needs.get-version.outputs.gh_version != '' }}
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ matrix.arch == 'amd64' }}
            type=raw,value=${{ matrix.arch }}
            type=raw,value=${{ needs.get-version.outputs.gh_version }}-${{ matrix.arch }}
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ./images/${{ env.IMAGE_NAME }}
          file: ./images/${{ env.IMAGE_NAME }}/Containerfile
          push: true
          no-cache: true
          platforms: linux/${{ matrix.arch }}
          build-args: |
            ARCH=${{ matrix.arch }}
          tags: |
            ${{ steps.meta.outputs.tags }}
